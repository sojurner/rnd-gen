{"version":3,"sources":["App/index.jsx","reportWebVitals.js","index.js"],"names":["App","useState","min","max","range","setRange","form","onChange","e","currentTarget","name","value","state","useRndNumForm","rndNum","setRndNum","generateRndNum","Math","ceil","floor","random","useRndNumGen","selectedImg","setSelectedImg","imgs","setImgs","setError","useEffect","a","fetch","process","response","ok","Error","json","result","resources","setRandomImg","length","useRndImg","className","style","backgroundImage","type","version","public_id","format","htmlFor","height","width","alt","src","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAgHeA,MAxDf,WAAgB,IAAD,EAzCO,WAAO,IAAD,EACAC,mBAAS,CAAEC,IAAK,IAAKC,IAAK,OAD1B,mBACnBC,EADmB,KACZC,EADY,KAS1B,MAAO,CAAEC,KAAMF,EAAOG,SANL,SAACC,GAAO,IAAD,EACEA,EAAEC,cAAlBC,EADc,EACdA,KAAMC,EADQ,EACRA,MAEdN,GAAS,SAACO,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBF,EAAOC,SAoChBE,GAAnBP,EADK,EACLA,KAAMC,EADD,EACCA,SADD,EAtDM,SAAC,GAAkB,IAAhBL,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAAU,EACTF,mBAAS,GADA,mBAC9Ba,EAD8B,KACtBC,EADsB,KAUrC,MAAO,CAAED,SAAQE,eAPM,WACrBd,EAAMe,KAAKC,KAAKhB,GAChBC,EAAMc,KAAKE,MAAMhB,GAEjBY,EAAUE,KAAKE,MAAMF,KAAKG,UAAYjB,EAAMD,EAAM,GAAKA,MAiDtBmB,CAAaf,GAAxCQ,EAFK,EAELA,OAAQE,EAFH,EAEGA,eAFH,EA7BG,WAAO,IAAD,EACgBf,mBAAS,MADzB,mBACfqB,EADe,KACFC,EADE,OAEEtB,mBAAS,IAFX,mBAEfuB,EAFe,KAETC,EAFS,OAGIxB,qBAHJ,mBAGRyB,GAHQ,WA0BtB,OArBAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,+EAE0BC,MAAM,GAAD,OACvBC,uCADuB,0BAF/B,WAESC,EAFT,QAKiBC,GALjB,sBAMW,IAAIC,MAAM,mCANrB,uBAQwBF,EAASG,OARjC,OAQSC,EART,OASGV,EAAQU,EAAOC,WATlB,kDAWGV,EAAS,EAAD,IAXX,yDAAD,KAcC,IAMI,CAAEJ,cAAae,aAJD,WACnBd,EAAeC,EAAKP,KAAKE,MAAMF,KAAKG,SAAWI,EAAKc,YAShBC,GAA9BjB,EAHK,EAGLA,YAAae,EAHR,EAGQA,aAMrB,OACE,qBACEG,UAAW,oBACXC,MACEnB,EACI,CACEoB,gBAAgB,OAAD,OAASZ,uCAAT,yBAAuDR,QAAvD,IAAuDA,OAAvD,EAAuDA,EAAaqB,KAApE,oBAA6ErB,QAA7E,IAA6EA,OAA7E,EAA6EA,EAAasB,QAA1F,mBAAqGtB,QAArG,IAAqGA,OAArG,EAAqGA,EAAauB,UAAlH,mBAA+HvB,QAA/H,IAA+HA,OAA/H,EAA+HA,EAAawB,OAA5I,MAEjB,GAPR,SAUE,qCACG,oBAAIN,UAAU,SAAd,SAAwB1B,GAAkB,YAC3C,sBAAK0B,UAAU,SAAf,UACE,sBAAKA,UAAU,kCAAf,UACE,uBAAOO,QAAQ,MAAf,iBACA,uBACEP,UAAU,0BACV9B,KAAK,MACLH,SAAUA,EACVI,MAAOL,EAAKJ,SAGhB,sBAAKsC,UAAU,kCAAf,UACE,wCACA,uBACEA,UAAU,0BACV9B,KAAK,MACLH,SAAUA,EACVI,MAAOL,EAAKH,YAIlB,wBAAQqC,UAAU,0BAAlB,SACE,qBACEQ,OAAQ,IACRC,MAAO,IACPC,IAAI,iBACJC,IAAI,mEACJC,QA3CO,WACfpC,IACAqB,eCnDWgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e78780fe.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst useRndNumGen = ({ min, max }) => {\n  const [rndNum, setRndNum] = useState(0);\n\n  const generateRndNum = () => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n\n    setRndNum(Math.floor(Math.random() * (max - min + 1) + min));\n  };\n\n  return { rndNum, generateRndNum };\n};\n\nconst useRndNumForm = () => {\n  const [range, setRange] = useState({ min: '1', max: '10' });\n\n  const onChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    setRange((state) => ({ ...state, [name]: value }));\n  };\n\n  return { form: range, onChange };\n};\n\nconst useRndImg = () => {\n  const [selectedImg, setSelectedImg] = useState(null);\n  const [imgs, setImgs] = useState([]);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch(\n          `${process.env.REACT_APP_CLOUDINARY_URL}/image/list/meme.json`\n        );\n        if (!response.ok) {\n          throw new Error('failed to get cloudinary images');\n        }\n        const result = await response.json();\n        setImgs(result.resources);\n      } catch (e) {\n        setError(e);\n      }\n    })();\n  }, []);\n\n  const setRandomImg = () => {\n    setSelectedImg(imgs[Math.floor(Math.random() * imgs.length)]);\n  };\n\n  return { selectedImg, setRandomImg };\n};\n\nfunction App() {\n  const { form, onChange } = useRndNumForm();\n  const { rndNum, generateRndNum } = useRndNumGen(form);\n  const { selectedImg, setRandomImg } = useRndImg();\n\n  const onSubmit = () => {\n    generateRndNum();\n    setRandomImg();\n  };\n  return (\n    <div\n      className={'root root--loaded'}\n      style={\n        selectedImg\n          ? {\n              backgroundImage: `url(${process.env.REACT_APP_CLOUDINARY_URL}/image/${selectedImg?.type}/v${selectedImg?.version}/${selectedImg?.public_id}.${selectedImg?.format})`,\n            }\n          : {}\n      }\n    >\n      <>\n        {<h1 className=\"number\">{rndNum ? rndNum : 'Boludez'}</h1>}\n        <div className=\"inputs\">\n          <div className=\"inputs__group inputs__min-group\">\n            <label htmlFor=\"min\">Min</label>\n            <input\n              className=\"input inputs__min-input\"\n              name=\"min\"\n              onChange={onChange}\n              value={form.min}\n            />\n          </div>\n          <div className=\"inputs__group inputs__max-group\">\n            <label>Max</label>\n            <input\n              className=\"input inputs__max-input\"\n              name=\"max\"\n              onChange={onChange}\n              value={form.max}\n            />\n          </div>\n        </div>\n        <button className=\"button button--generate\">\n          <img\n            height={100}\n            width={100}\n            alt=\"argentina flag\"\n            src=\"https://cdn.countryflags.com/thumbs/argentina/flag-round-250.png\"\n            onClick={onSubmit}\n          />\n        </button>\n      </>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}